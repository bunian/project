<?php<?php if ( ! defined('BASEPATH')) exit('No direct script access allowed');class xml{	// 输入的字符	public $in_charset = 'utf-8';	// 输出的头字符	public $head_charset = 'utf-8';		/**	* 实例化用户Model, 可以指定XML的字符编码	*/	public function __construct() {	}		/**	* 设置输入的编码	*	* @param	string	$charset 编码 utf-8 或 gbk	*	*/	public function setInCharset($charset)	{		$this->in_charset = strtolower($charset);	}		/**	* 设置输出头的编码	*	* @param	string	$charset 编码 utf-8 或 gbk	*	*/	public function setHeadCharset($charset)	{		$this->head_charset = strtolower($charset);	}		/**	 * 输出XML格式化 字符串	 *	 * 传入值为数组 $array, 状态码 $status, 消息文本 $msg	 *	 * @access	public	 * @param	array status, integer suid, string msg	 * @return	string of xml	*/	public function export($array, $status = 100, $msg = '')	{		// 编码格式		$charset = strtolower($this->head_charset); 		// xml头标示		header('Content-Type: text/xml; charset=' . $charset);  		// 实例dom节点		$dom = new DOMDocument('1.0', $charset);			$dom -> formatOutput = true;						//根节点元素		$rootElement = $dom->appendChild(new DOMElement('root'));		// 状态码元素		$statusElement = $rootElement->appendChild(new DOMElement('status'));		$statusElement->nodeValue = $status;				//如果是空的数组,那么就给指定status为-100		if(!empty($array)) {							// 列表节点			$itemlistElement = $rootElement->appendChild(new DOMElement('result'));			foreach ($array AS $key => $val)			{				// 节点名称				$name = 'item';				if (is_numeric($key))				{					// 如果是数字key值变换成item					$name = 'item';				}				elseif (is_string($key))				{					// 如果是字符串直接用key值当节点名					$name = $key;				}				$this->elementItem($name, $val, $itemlistElement);			}		}				// msg节点		$msgElement = $rootElement->appendChild(new DOMElement('msg'));		$msg = $this->change_str_charset($msg);		$msgElement->nodeValue = $msg;				return preg_replace("/\n$/", '', $dom->saveXML());	}	/**	 * 组合最终节点数据	 *	 * 传入值为数组 $row, 传址 $itemlistElement 列表element	 *	 * @access	public	 * @param	string	$name	组装节点的key值	 * @param	Array row, Object type DOMElement	 * @return	Not return but update DOMDocument	*/	public function elementItem($name, $row, &$itemlistElement)	{		$itemElement = $itemlistElement->appendChild(new DOMElement($name));		if (is_array($row))		{			foreach($row as $key => $value)			{				$this->elementItem($key, $value, $itemElement);			}		}		else		{			$new_str = $this->changeStrCharset($row);			$itemElement->nodeValue = $new_str;						unset($itemElement);			}	}		/**	* 改变字符串编码 在字符串编码与设置编码不一致时使用	* 	* @param	string	$str	要判断的字符串	* 	* @return	string	处理完的编码	*/	private function changeStrCharset($str)	{		// 是字符串且输入字符不等于输出字符,dom输出的汉字编码为utf-8固定		if (is_string($str) && ($this->in_charset != 'utf-8'))		{			$str = mb_convert_encoding($str, 'utf-8', $this->in_charset);		}		return $str;	}}